import mongoose from "mongoose";

//IChapter is for TS which extends mongoose Document
//type checking 
//ensures correct use of fields 
// to ensure IChapter includes built in mongoose methods 
//like .save()  .populate()  _id  .find()
export interface IChapter extends mongoose.Document{
    _id: mongoose.Types.ObjectId,   //mongoose.Types.ObjectId  is preferred over  Schema.Types.ObjectId  in TypeScript interfaces.
    bookId: mongoose.Types.ObjectId,
    title: string,
    content: string,
    chapterNumber: number,
    order: number,  //For later:: if not given we will make highest next number as order number 
    createdAt?:Date,//in js createdAt and updatedAt were auto generated by timestamps
    updatedAt?:Date,//but we define here in ts // and ? because there may be value or null 
}

//defines shape for mongo db document
//this is like data structure in document with this definition 
const chapterSchema = new mongoose.Schema({
    bookId:{
        type: mongoose.Schema.Types.ObjectId,
        ref: "Book", //reference to Book 
        required: true
    },
    title: {    
        type: String,
        trim: true,
        maxLength: 50
    },  
    chapterNumber:{
        type: Number,
        required: true
    },
    content: {
        type: String,
        required: true
    },
    order: { 
        type: Number,
        required: true
    }
}, { timestamps: true });

chapterSchema.index({ bookId: 1, chapterNumber: 1 }); 
chapterSchema.index({ bookId: 1, order: 1 }); 

//  here 
//  const Chapter = mongoose.model("Chapter", chapterSchema);   // 

// This will work, but you’re not passing IChapter to the model,
//  so TypeScript won’t infer types properly on Chapter.find(), etc.


const Chapter = mongoose.model<IChapter>("Chapter", chapterSchema);
//This way:
// Chapter.find() will return documents typed as IChapter.
export default Chapter;